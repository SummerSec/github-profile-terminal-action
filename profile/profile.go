package profile

import (
	"context"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/liamg/github-profile-magic-action/terminal"

	"github.com/liamg/github-profile-magic-action/theme"

	"github.com/google/go-github/v43/github"
	"github.com/liamg/github-profile-magic-action/config"
)

const (
	Width     = 846
	HalfWidth = Width / 2
	Height    = 200
)

type Profile struct {
	dir    string
	config *config.Config
	gh     *github.Client
	theme  theme.Theme
}

func New(conf *config.Config) *Profile {
	return &Profile{
		config: conf,
		gh:     newGithubClient(conf),
		theme:  theme.ByName(conf.Theme),
	}
}

func (p *Profile) Generate(ctx context.Context, dir string) error {

	p.dir = dir

	repoBits := strings.Split(p.config.Context.Repository, "/")
	if len(repoBits) != 2 {
		return fmt.Errorf("invalid repository: %s", p.config.Context.Repository)
	}
	if repoBits[0] != repoBits[1] {
		return fmt.Errorf(
			"this action should be run on a special profile repository e.g. 'github.com/liamg/liamg', "+
				"'%s' does not appear to be such a repo", p.config.Context.Repository,
		)
	}

	if err := os.MkdirAll(dir, 0o700); err != nil {
		return fmt.Errorf("failed to create output dir: %w", err)
	}

	readme, err := os.Create(filepath.Join(dir, "README.md"))
	if err != nil {
		return fmt.Errorf("failed to create README.md: %w", err)
	}
	defer func() { _ = readme.Close() }()

	// 1. stats: commits, PRs, stars,

	//user, _, err := p.gh.Users.Get(ctx, "")
	//if err != nil {
	//return fmt.Errorf("github api error: %w", err)
	//}

	ownedRepositores, err := p.getOwnedRepos(ctx)
	if err != nil {
		return err
	}

	var stars int
	for _, repo := range ownedRepositores {
		stars += *repo.StargazersCount
	}

	term := terminal.New(Width, 600, nil, p.theme)
	term.Println("BIOS v2.1.0 Build date 20/01/2031")
	term.Frame(20)
	if err := term.ToGif(filepath.Join(p.dir, "os.gif"), false); err != nil {
		return err
	}

	fmt.Println("Adding terminal to markdown...")
	if _, err := readme.Write([]byte(fmt.Sprintf(`![gifOS](%s)`, "os.gif"))); err != nil {
		return err
	}

	// 2. top projects

	// 3. recently starred
	// 4. last action
	// 5. latest posts (rss)

	if _, err := readme.WriteString("\n\n_Automatically generated by [liamg/github-profile-magic-action](https://github.comliamg/github-profile-magic-action)_\n"); err != nil {
		return fmt.Errorf("write failed: %w", err)
	}
	return nil
}
